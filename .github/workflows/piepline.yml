name: Pipeline

on:
  push:
    paths:
      - 'frontend/**'
      - 'terraform/**'
      - 'backend/**'
  workflow_dispatch:

env:
  TF_VAR_aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws-region: ${{ secrets.AWS_REGION }}
  TF_VAR_root-domain: ${{ secrets.ROOT_DOMAIN }}
  TF_VAR_subdomain-name: ${{ secrets.PROJECT_NAME }}
  TF_VAR_bucket-name: ${{ secrets.FRONTEND_S3_BUCKET_NAME }}
  TF_VAR_project-name: ${{ secrets.PROJECT_NAME }}
  TF_VAR_environment: 'dev'

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/lambdas/auth/package-lock.json

      - name: Install dependencies
        working-directory: backend/lambdas/auth
        run: npm ci

      - name: Lint code
        working-directory: backend/lambdas/auth
        run: npm run lint

      - name: Run tests
        working-directory: backend/lambdas/auth
        run: npm test

      - name: Build and package
        working-directory: backend/lambdas/auth
        run: |
          npm run package
          if [ ! -f lambda-auth.zip ]; then
            echo "Error: lambda-auth.zip was not created"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-auth
          path: backend/lambdas/auth/lambda-auth.zip
          retention-days: 5

  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Auth Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-auth
          path: backend/lambdas/auth

      - name: Set Auth Lambda filename
        run: |
          echo "TF_VAR_filename=$(pwd)/backend/lambdas/auth/lambda-auth.zip" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        working-directory: terraform
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=plan.tfplan

      - name: Terraform Show
        working-directory: terraform
        run: terraform show plan.tfplan

      - name: Terraform Apply
        working-directory: terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve plan.tfplan

  deploy-content:
    name: Deploy Website Content
    needs: infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Next.js application
        working-directory: frontend
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync frontend/out s3://${{ env.TF_VAR_bucket-name }}/ \
            --delete \
            --cache-control "max-age=3600"

  # destroy:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Install jq
  #       run: sudo apt-get install -y jq

  #     - name: Clean up S3 bucket
  #       run: |
  #         chmod +x scripts/cleanup.sh
  #         source scripts/cleanup.sh
  #         delete_s3_bucket "${{ env.TF_VAR_bucket-name }}"

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.5.0"

  #     - name: Terraform Init
  #       run: terraform -chdir=terraform init

  #     - name: Terraform Destroy
  #       run: terraform -chdir=terraform destroy -auto-approve 